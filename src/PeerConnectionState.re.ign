open Json.Infix;

/**
  Represents state of a peer,
  describes transitions of the state and related side-effects
 */

/* CONSTANTS */
let waitingTimeoutMs = 10 * 1000;

type sdpMsgType =
  | Offer
  | Answer;

type t =
  /* failedAttempts */
  | CreatingSdpOffer(int)
  /* rtcConn, failedAttempts */
  | WaitingForAcceptor(RtcSub.conn, int)
  /* intervalSec, failedAttempts, lastErrorMessage */
  | FailedRetryingAt(int, int, string)
  /* inGroup, ssConn */
  | CreatingSdpAnswer
  | WaitingForInitiator(RtcSub.conn)
  /* RTC conn, inGroup, signal online */
  | Connected(RtcSub.conn, bool, PeersStatuses.peerStatus);

[@bs.deriving accessors]
type msgs =
  /*
   Group membership changes
   */
  | AddedToGroup
  | RemovedFromLastGroup
  /*
   Online/Offline
   */
  | WentOnline
  | WentOffline
  /*
   Signal receiving & verification
   */
  | ReceivedSignal(string, Message.peerToPeerMsg)
  | ReceivedVerifiedSignal(Message.peerToPeerMsg)
  | SignalVerificationFailed(exn)
  | PrepareKeyRequestFinished(Result.t(string, exn))
  | VerifyKeyResponseFinished(Result.t(SimpleCrypto.key, exn))
  | VerifyKeyRequestFinished(Result.t(SimpleCrypto.key, exn))
  | PrepareKeyResponseFinished(Result.t(string, exn))
  /*
   RTC connection
   */
  | RtcRetryConnection
  | RtcClose
  /* t, sdp */
  | RtcAnswerReady(RTCCmds.t, string)
  | RtcOfferReady(RTCCmds.t, string)
  | RtcConnected
  /*
   Alias changes
   */
  | UpdateAlias(string);

exception InvalidState;

/* HELPERS */

let shouldAccept = (thisPeer: ThisPeer.t, srcPeerId) =>
  thisPeer.id < srcPeerId;

let sendSignalMessage = (thisPeer, tgPeer, msg, ssConn) =>
  Cmds.wrapPromise(
    () =>
      SignalServerCmds.signAndSendMsg(
        PeerToPeer(thisPeer.ThisPeer.id, tgPeer, msg),
        thisPeer.ThisPeer.privateKey,
        ssConn,
      ),
    _ => Msgs.noop,
    Msgs.cryptoFatalError,
  );

/* UPDATES */

let init = (peerId, inGroup, peerSignalState: PeersStatuses.peerStatus) =>
  switch (inGroup, peerSignalState) {
  | (false, peerSignalState) => (NotInGroup(peerSignalState), Cmds.none)
  | (true, Offline) => (InGroupWaitingForOnlineSignal, Cmds.none)
  | (true, Online) => (CreatingSdpOffer(0), createInitiator(peerId))
  };

let update = (thisPeer, peerId, peerKey, prevState, msg) =>
  switch (msg, prevState) {
  | (AddedToGroup, NotInGroup(Online))
  | (WentOnline, InGroupWaitingForOnlineSignal) => (
      CreatingSdpOffer(0),
      createInitiator(peerId),
    )

  | (RtcRetryConnection, FailedRetryingAt(_, failedAttempts, _)) => (
      CreatingSdpOffer(failedAttempts),
      createInitiator(peerId),
    )

  /* Waiting timeout */
  | (RtcRetryConnection, WaitingForAcceptor(rtcConn, failedAttempts)) => (
      CreatingSdpOffer(failedAttempts + 1),
      Cmds.batch([RTCCmds.destroy(rtcConn), createInitiator(peerId)]),
    )

  | (AddedToGroup, NotInGroup(Offline))
  | (
      WentOffline,
      CreatingSdpOffer(_) | FailedRetryingAt(_) |
      OnlineCreatingSdpAnswer(true, _),
    ) => (
      InGroupWaitingForOnlineSignal,
      Cmds.none,
    )

  | (RtcClose, Connected(rtcConn, true, Offline))
  | (
      WentOffline,
      WaitingForAcceptor(_, rtcConn, _) |
      OnlineWaitingForInitiator(true, _, rtcConn),
    ) => (
      InGroupWaitingForOnlineSignal,
      RTCCmds.destroy(rtcConn),
    )

  | (RtcOfferReady(rtcConn, sdp), CreatingSdpOffer(failedAttempts)) => (
      WaitingForAcceptor(rtcConn, failedAttempts),
      Cmds.batch([
        sendSignalMessage(thisPeer, peerId, Offer(sdp), ssConn),
        /* TODO: Exponential backoff */
        Cmds.timeout(Msgs.rtcRetryConnection(peerId), waitingTimeoutMs),
      ]),
    )

  | (ReceivedVerifiedSignal(Answer(sdp)), WaitingForAcceptor(rtcConn, _)) => (
      /* TODO: Check Signature, maybe move upwards to Peer.update */
      prevState,
      Cmds.batch([
        RTCCmds.signal(rtcConn, sdp),
        /* TODO: Exponential backoff */
        Cmds.timeout(Msgs.rtcRetryConnection(peerId), waitingTimeoutMs),
      ]),
    )

  | (ReceivedVerifiedSignal(Offer(sdp)), NotInGroup(Online)) => (
      OnlineCreatingSdpAnswer(false),
      createAcceptorFromOffer(peerId, sdp),
    )

  | (
      ReceivedVerifiedSignal(Offer(sdp)),
      CreatingSdpOffer(_) | WaitingForAcceptor(_, _) |
      FailedRetryingAt(_, _, _),
    )
      when shouldAccept(thisPeer, peerId) =>
    let destroyRtcCmd =
      switch (prevState) {
      | WaitingForAcceptor(_, rtcConn, _) => RTCCmds.destroy(rtcConn)
      | _ => Cmds.none
      };
    (
      OnlineCreatingSdpAnswer(true),
      Cmds.batch([destroyRtcCmd, createAcceptorFromOffer(peerId, sdp)]),
    );

  | (ReceivedVerifiedSignal(Offer(sdp)), WaitingForAcceptor(rtcConn, _))
      when shouldAccept(thisPeer, peerId) => (
      OnlineCreatingSdpAnswer(true),
      Cmds.batch([
        RTCCmds.destroy(rtcConn),
        createAcceptorFromOffer(peerId, sdp),
      ]),
    )

  | (AddedToGroup, OnlineCreatingSdpAnswer(false)) => (
      OnlineCreatingSdpAnswer(true),
      Cmds.none,
    )

  | (RtcConnected, OnlineWaitingForInitiator(inGroup, rtcConn)) => (
      Connected(rtcConn, inGroup, Online),
      Cmds.none,
    )

  | (RtcConnected, WaitingForAcceptor(rtcConn, _)) => (
      Connected(rtcConn, true, Online),
      Cmds.none,
    )

  | (WentOnline, Connected(rtcConn, inGroup, Offline)) => (
      Connected(rtcConn, inGroup, Online),
      Cmds.none,
    )

  | (WentOffline, Connected(rtcConn, true, Online(_))) => (
      Connected(rtcConn, true, Offline),
      Cmds.none,
    )

  | (AddedToGroup, Connected(rtcConn, false, signalState)) => (
      Connected(rtcConn, true, signalState),
      Cmds.none,
    )

  | (RtcAnswerReady(rtcConn, sdp), OnlineCreatingSdpAnswer(inGroup)) => (
      OnlineWaitingForInitiator(inGroup, rtcConn),
      Cmds.batch([
        sendSignalMessage(thisPeer, peerId, Answer(sdp), ssConn),
        /* TODO: Exponential backoff */
        Cmds.timeout(Msgs.rtcRetryConnection(peerId), waitingTimeoutMs),
      ]),
    )

  | (AddedToGroup, OnlineWaitingForInitiator(false, rtcConn)) => (
      OnlineWaitingForInitiator(true, rtcConn),
      Cmds.none,
    )

  | (RtcClose, OnlineCreatingSdpAnswer(true)) =>
    let newFailedAttempts = 1;
    let timeoutMs = Retry.getTimeoutMs(newFailedAttempts);
    (
      FailedRetryingAt(timeoutMs |> Retry.msToSec, newFailedAttempts, ""),
      Cmds.timeout(Msgs.rtcRetryConnection(peerId), timeoutMs),
    );

  | (RtcClose, CreatingSdpOffer(failedAttempts)) =>
    let newFailedAttempts = failedAttempts + 1;
    let timeoutMs = Retry.getTimeoutMs(newFailedAttempts);
    (
      FailedRetryingAt(timeoutMs |> Retry.msToSec, newFailedAttempts, ""),
      Cmds.timeout(Msgs.rtcRetryConnection(peerId), timeoutMs),
    );

  | (
      RtcClose,
      OnlineWaitingForInitiator(true, rtcConn) |
      Connected(rtcConn, true, Online),
    ) =>
    let newFailedAttempts = 1;
    let timeoutMs = Retry.getTimeoutMs(newFailedAttempts);
    (
      FailedRetryingAt(timeoutMs |> Retry.msToSec, newFailedAttempts, ""),
      Cmds.batch([
        RTCCmds.destroy(rtcConn),
        Cmds.timeout(Msgs.rtcRetryConnection(peerId), timeoutMs),
      ]),
    );

  | (RtcClose, WaitingForAcceptor(rtcConn, failedAttempts)) =>
    let newFailedAttempts = failedAttempts + 1;
    let timeoutMs = Retry.getTimeoutMs(newFailedAttempts);
    (
      FailedRetryingAt(timeoutMs |> Retry.msToSec, newFailedAttempts, ""),
      Cmds.batch([
        RTCCmds.destroy(rtcConn),
        Cmds.timeout(Msgs.rtcRetryConnection(peerId), timeoutMs),
      ]),
    );

  | (RtcClose | WentOffline, OnlineCreatingSdpAnswer(false)) => (
      NotInGroup(Online),
      Cmds.none,
    )

  | (RtcClose | WentOffline, OnlineWaitingForInitiator(false, rtcConn)) => (
      NotInGroup(Online),
      RTCCmds.destroy(rtcConn),
    )

  | (RtcClose | WentOffline, Connected(rtcConn, false, peerSignalState)) => (
      NotInGroup(peerSignalState),
      RTCCmds.destroy(rtcConn),
    )

  | (RemovedFromLastGroup, Connected(rtcConn, true, online))
  /* TODO: Really? Don't we need to tell him first? */
  | (RemovedFromLastGroup, Connected(rtcConn, false, online)) => (
      NotInGroup(online),
      RTCCmds.destroy(rtcConn),
    )
  | (RemovedFromLastGroup, InGroupWaitingForOnlineSignal)
  | (WentOffline, NotInGroup(Online)) => (NotInGroup(Offline), Cmds.none)

  | (WentOnline, NotInGroup(Offline)) => (NotInGroup(Online), Cmds.none)

  | (
      RemovedFromLastGroup,
      CreatingSdpOffer(_) | FailedRetryingAt(_, _, _) |
      OnlineCreatingSdpAnswer(true),
    ) => (
      NotInGroup(Online),
      Cmds.none,
    )

  | (
      RemovedFromLastGroup,
      WaitingForAcceptor(rtcConn, _) |
      OnlineWaitingForInitiator(true, rtcConn),
    ) => (
      NotInGroup(Online),
      RTCCmds.destroy(rtcConn),
    )

  /* Matches with no change */

  | (
      ReceivedVerifiedSignal(Answer(_)),
      NotInGroup(_) | InGroupWaitingForOnlineSignal | CreatingSdpOffer(_) |
      FailedRetryingAt(_, _, _, _) |
      OnlineCreatingSdpAnswer(_, _) |
      OnlineWaitingForInitiator(_, _, _) |
      Connected(_, _, _),
    )
  | (
      ReceivedVerifiedSignal(Offer(_)),
      InGroupWaitingForOnlineSignal | CreatingSdpOffer(_) |
      WaitingForAcceptor(_, _, _) |
      FailedRetryingAt(_, _, _, _) |
      OnlineCreatingSdpAnswer(_, _) |
      OnlineWaitingForInitiator(_, _, _) |
      Connected(_, _, _) |
      NotInGroup(Offline),
    )
  | (
      WentOffline,
      NotInGroup(Offline) | InGroupWaitingForOnlineSignal |
      Connected(_, _, Offline),
    )
  | (
      WentOnline(_),
      OnlineCreatingSdpAnswer(_, _) | OnlineWaitingForInitiator(_, _, _) |
      CreatingSdpOffer(_) |
      WaitingForAcceptor(_) |
      FailedRetryingAt(_) |
      Connected(_, _, Online(_)) |
      NotInGroup(Online(_)),
    )
  | (
      RtcRetryConnection,
      OnlineCreatingSdpAnswer(_, _) | OnlineWaitingForInitiator(_, _, _) |
      InGroupWaitingForOnlineSignal |
      CreatingSdpOffer(_) |
      Connected(_, _, _) |
      NotInGroup(_),
    )
  | (
      RtcOfferReady(_, _),
      OnlineCreatingSdpAnswer(_, _) | OnlineWaitingForInitiator(_, _, _) |
      FailedRetryingAt(_) |
      Connected(_, _, _) |
      WaitingForAcceptor(_) |
      InGroupWaitingForOnlineSignal |
      NotInGroup(_),
    )
  | (
      RtcAnswerReady(_, _),
      NotInGroup(_) | InGroupWaitingForOnlineSignal | CreatingSdpOffer(_) |
      WaitingForAcceptor(_, _, _) |
      FailedRetryingAt(_, _, _, _) |
      OnlineWaitingForInitiator(_, _, _) |
      Connected(_, _, _),
    )
  | (
      RtcConnected,
      OnlineCreatingSdpAnswer(_, _) | FailedRetryingAt(_) |
      CreatingSdpOffer(_) |
      Connected(_, _, _) |
      InGroupWaitingForOnlineSignal |
      NotInGroup(_),
    )
  | (
      RemovedFromLastGroup,
      OnlineCreatingSdpAnswer(false, _) |
      OnlineWaitingForInitiator(false, _, _) |
      NotInGroup(_),
    )
  | (
      AddedToGroup,
      OnlineCreatingSdpAnswer(true, _) | Connected(_, true, _) |
      OnlineWaitingForInitiator(true, _, _) |
      InGroupWaitingForOnlineSignal |
      CreatingSdpOffer(_) |
      WaitingForAcceptor(_) |
      FailedRetryingAt(_),
    )
  | (
      RtcClose,
      FailedRetryingAt(_) | InGroupWaitingForOnlineSignal | NotInGroup(_),
    )
  | (
      UpdateAlias(_) | ReceivedVerifiedSignal(KeyRequest(_) | KeyResponse(_)),
      _,
    )
  | (ReceivedSignal(_), _)
  | (
      SignalVerificationFailed(_) | PrepareKeyRequestFinished(_) |
      VerifyKeyResponseFinished(_) |
      VerifyKeyRequestFinished(_) |
      PrepareKeyResponseFinished(_),
      _,
    ) => (
      prevState,
      Cmds.none,
    )
  };

/* PERSISTENCY */
/* QUERIES */

let getActiveConnection = peer =>
  switch (peer.connectionState) {
  | Connected(rtcConn, _, _) => Some(rtcConn)
  | _ => None
  };